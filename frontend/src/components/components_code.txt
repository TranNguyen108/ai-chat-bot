
--- ChatHeader.jsx ---
import React, { useState } from 'react';
import { PencilIcon, UserIcon } from '@heroicons/react/24/outline';

const ChatHeader = ({ title, onTitleChange, onPromptSubmit }) => {
  const [isEditingTitle, setIsEditingTitle] = useState(false);
  const [titleValue, setTitleValue] = useState(title);
  const [prompt, setPrompt] = useState('');

  const handleTitleSave = () => {
    onTitleChange(titleValue);
    setIsEditingTitle(false);
  };

  const handlePromptSubmit = (e) => {
    e.preventDefault();
    if (prompt.trim()) {
      onPromptSubmit(prompt);
      setPrompt('');
    }
  };

  return (
    <div className="bg-white border-b border-gray-200 p-4">
      <div className="flex items-center justify-between">
        {/* Editable Title */}
        <div className="flex items-center">
          {isEditingTitle ? (
            <div className="flex items-center">
              <input
                type="text"
                value={titleValue}
                onChange={(e) => setTitleValue(e.target.value)}
                onBlur={handleTitleSave}
                onKeyDown={(e) => e.key === 'Enter' && handleTitleSave()}
                className="text-lg font-semibold text-gray-900 bg-transparent border-b border-gray-300 focus:border-blue-500 focus:outline-none smooth-transition"
                autoFocus
              />
            </div>
          ) : (
            <div className="flex items-center">

            </div>
          )}
        </div>

        {/* Prompt Input */}
        <div className="flex items-center">
          
        </div>
      </div>
    </div>
  );
};

export default ChatHeader;

--- ChatInput.jsx ---
import React, { useState } from 'react';
import { PaperAirplaneIcon } from '@heroicons/react/24/solid';

const ChatInput = ({ onSendMessage, isLoading }) => {
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (message.trim() && !isLoading) {
      onSendMessage(message);
      setMessage('');
    }
  };

  return (
    <div className="bg-white border-t border-gray-200 p-4">
      <form onSubmit={handleSubmit} className="flex items-center space-x-3">
        <div className="flex-1 relative">
          <input
            type="text"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            placeholder="Send your message"
            disabled={isLoading}
            className="input-field pr-12 disabled:bg-gray-100 disabled:cursor-not-allowed"
          />
          <button
            type="submit"
            disabled={!message.trim() || isLoading}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 p-2 text-blue-600 hover:text-blue-700 disabled:text-gray-400 disabled:cursor-not-allowed smooth-transition"
          >
            <PaperAirplaneIcon className="w-5 h-5" />
          </button>
        </div>
      </form>
      
      {isLoading && (
        <div className="mt-2 text-sm text-gray-500 flex items-center">
          <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2"></div>
          AI is thinking...
        </div>
      )}
    </div>
  );
};

export default ChatInput;

--- ChatMessage.jsx ---
import React from 'react';
import { 
  ArrowPathIcon, 
  HandThumbUpIcon, 
  HandThumbDownIcon,
  SparklesIcon 
} from '@heroicons/react/24/outline';
import { TypingIndicator } from './LoadingSpinner';

const ChatMessage = ({ message, onRegenerate, onFeedback, isLoading }) => {
  const isUser = message?.type === 'user';

  // Show typing indicator for loading state
  if (isLoading) {
    return (
      <div className="flex items-start mb-6 message-enter">
        <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center mr-3">
          <SparklesIcon className="w-5 h-5 text-gray-600" />
        </div>
        <div className="flex-1">
          <div className="card p-4">
            <TypingIndicator />
          </div>
        </div>
      </div>
    );
  }

  if (isUser) {
    return (
      <div className="flex justify-end mb-4 message-enter">
        <div className="max-w-xs lg:max-w-md px-4 py-2 bg-blue-600 text-white rounded-lg">
          <p className="text-sm">{message.content}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="flex items-start mb-6 message-enter">
      {/* AI Avatar */}
      <div className="flex-shrink-0 w-8 h-8 bg-gray-100 rounded-full flex items-center justify-center mr-3">
        <SparklesIcon className="w-5 h-5 text-gray-600" />
      </div>

      {/* Message Content */}
      <div className="flex-1">
        <div className="card p-4 mb-3">
          <p className="text-gray-900 mb-4 whitespace-pre-wrap">{message.content}</p>
          
          {/* Sample Image - You can replace this with actual image from AI response */}
          {message.hasImage && (
            <div className="mb-4">
              <img 
                src="https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba?w=300&h=200&fit=crop&crop=face"
                alt="Generated cat image"
                className="rounded-lg max-w-sm shadow-sm card-hover smooth-transition"
              />
            </div>
          )}
        </div>

        {/* Action Buttons */}
        <div className="flex items-center space-x-2">
          {onRegenerate && (
            <button
              onClick={() => onRegenerate(message.id)}
              className="btn-secondary text-sm"
            >
              <ArrowPathIcon className="w-4 h-4 mr-1" />
              Regenerate
            </button>
          )}

          {onFeedback && (
            <div className="flex items-center space-x-1">
              <button
                onClick={() => onFeedback(message.id, 'like')}
                className="p-1 text-gray-400 hover:text-green-600 smooth-transition"
                title="Like this response"
              >
                <HandThumbUpIcon className="w-4 h-4" />
              </button>
              <button
                onClick={() => onFeedback(message.id, 'dislike')}
                className="p-1 text-gray-400 hover:text-red-600 smooth-transition"
                title="Dislike this response"
              >
                <HandThumbDownIcon className="w-4 h-4" />
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatMessage;

--- LoadingSpinner.jsx ---
import React from 'react';

const LoadingSpinner = ({ size = 'md', text = 'Loading...' }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8'
  };

  return (
    <div className="flex items-center justify-center space-x-2">
      <div className={`${sizeClasses[size]} animate-spin rounded-full border-2 border-gray-300 border-t-blue-600`}></div>
      {text && <span className="text-gray-600 text-sm">{text}</span>}
    </div>
  );
};

export const TypingIndicator = () => {
  return (
    <div className="flex items-center space-x-2">
      <div className="flex space-x-1">
        <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
        <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
        <div className="w-2 h-2 bg-gray-400 rounded-full typing-dot"></div>
      </div>
      <span className="text-sm text-gray-500">AI is typing...</span>
    </div>
  );
};

export default LoadingSpinner;

--- Sidebar.jsx ---
import React, { useState, useEffect } from 'react';
import { 
  PlusIcon, 
  ChatBubbleLeftIcon,
  UserIcon,
  ArrowUpIcon,
  SparklesIcon
} from '@heroicons/react/24/outline';

const Sidebar = ({ conversations, activeConversationId, onSelectConversation, onNewChat, user, onLogout, onDeleteConversation, onRenameConversation }) => {
  const today = new Date();
  const sevenDaysAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);

  const todayConversations = conversations.filter(conv => {
    const convDate = new Date(conv.created_at);
    return convDate.toDateString() === today.toDateString();
  });

  const recentConversations = conversations.filter(conv => {
    const convDate = new Date(conv.created_at);
    return convDate >= sevenDaysAgo && convDate.toDateString() !== today.toDateString();
  });

  const [editingId, setEditingId] = useState(null);
  const [editTitle, setEditTitle] = useState('');

  const handleEdit = (conversation) => {
    setEditingId(conversation.id);
    setEditTitle(conversation.title);
  };
  const handleEditChange = (e) => setEditTitle(e.target.value);
  const handleEditBlur = (conversation) => {
    if (editTitle.trim() && editTitle !== conversation.title) {
      onRenameConversation(conversation.id, editTitle.trim());
    }
    setEditingId(null);
  };
  const handleEditKeyDown = (e, conversation) => {
    if (e.key === 'Enter') {
      handleEditBlur(conversation);
    } else if (e.key === 'Escape') {
      setEditingId(null);
    }
  };

  const ConversationItem = ({ conversation, isActive }) => (
    <div 
      className={`flex items-center p-3 rounded-lg cursor-pointer smooth-transition message-enter ${
        isActive 
          ? 'bg-gray-200 border-l-4 border-blue-500' 
          : 'hover:bg-gray-100'
      }`}
    >
      <div onClick={() => onSelectConversation(conversation.id)} className="flex-1 min-w-0 flex items-center">
        <ChatBubbleLeftIcon className="w-5 h-5 text-gray-500 mr-3 flex-shrink-0" />
        <div>
          {editingId === conversation.id ? (
            <input
              className="text-lg font-semibold text-gray-900 bg-transparent border-b border-gray-300 focus:border-blue-500 focus:outline-none smooth-transition"
              type="text"
              value={editTitle}
              autoFocus
              onChange={handleEditChange}
              onBlur={() => handleEditBlur(conversation)}
              onKeyDown={e => handleEditKeyDown(e, conversation)}
              maxLength={50}
            />
          ) : (
            <div className="flex items-center">
              <p
                className="text-sm font-medium text-gray-900 truncate cursor-pointer"
                title="Đổi tên đoạn chat"
              >
                {conversation.title}
              </p>
              <button
                className="ml-2 px-2 py-1 text-xs text-blue-500 bg-blue-50 rounded hover:bg-blue-100"
                title="Đổi tên đoạn chat"
                onClick={e => { e.stopPropagation(); handleEdit(conversation); }}
              >
                Đổi tên
              </button>
            </div>
          )}
          {conversation.last_message && (
            <p className="text-xs text-gray-500 truncate">
              {conversation.last_message}
            </p>
          )}
        </div>
      </div>
      <button
        className="ml-2 px-2 py-1 text-xs text-red-500 bg-red-50 rounded hover:bg-red-100"
        title="Xoá lịch sử chat"
        onClick={() => onDeleteConversation(conversation.id)}
      >
        Xoá
      </button>
    </div>
  );

  return (
    <div className="w-80 bg-gray-50 border-r border-gray-200 flex flex-col h-full">
      {/* Header */}
      <div className="p-4 border-b border-gray-200">
        <div className="flex items-center mb-4">
          <SparklesIcon className="w-8 h-8 text-blue-600 mr-2" />
          <h1 className="text-xl font-bold text-gradient-primary">ChatAI</h1>
        </div>
        
        <button 
          onClick={onNewChat}
          className="w-full flex items-center justify-center p-3 card card-hover smooth-transition focus-ring"
        >
          <PlusIcon className="w-5 h-5 mr-2" />
          New Chat
        </button>
      </div>

      {/* Conversations */}
      <div className="flex-1 overflow-y-auto p-4 custom-scrollbar">
        {todayConversations.length > 0 && (
          <div className="mb-6">
            <h2 className="text-xs font-semibold text-gray-500 uppercase tracking-wide mb-3">
              Today
            </h2>
            <div className="space-y-2">
              {todayConversations.map(conv => (
                <ConversationItem 
                  key={conv.id}
                  conversation={conv}
                  isActive={activeConversationId === conv.id}
                />
              ))}
            </div>
          </div>
        )}

        {recentConversations.length > 0 && (
          <div className="mb-6">
            <h2 className="text-xs font-semibold text-gray-500 uppercase tracking-wide mb-3">
              Previous 7 Days
            </h2>
            <div className="space-y-2">
              {recentConversations.map(conv => (
                <ConversationItem 
                  key={conv.id}
                  conversation={conv}
                  isActive={activeConversationId === conv.id}
                />
              ))}
            </div>
          </div>
        )}

        {conversations.length === 0 && (
          <div className="text-center text-gray-500 mt-8">
            <ChatBubbleLeftIcon className="w-12 h-12 mx-auto mb-3 text-gray-300" />
            <p className="text-sm">No conversations yet</p>
            <p className="text-xs text-gray-400">Start a new chat to begin</p>
          </div>
        )}
      </div>

      {/* User Info */}
      <div className="p-4 border-t border-gray-200">
        <div className="flex items-center justify-between">
          <div className="flex items-center">
            <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
              <UserIcon className="w-5 h-5 text-blue-600" />
            </div>
            <div className="ml-3">
              <p className="text-sm font-medium text-gray-900">
                {user?.name || user?.email || 'Emily'}
              </p>
            </div>
          </div>
          <div className="flex flex-col items-end">
            <button className="px-3 py-1 bg-blue-600 text-white text-xs rounded-full hover:bg-blue-700 smooth-transition focus-ring mb-2">
              <ArrowUpIcon className="w-3 h-3 inline mr-1" />
              Upgrade
            </button>
            <button
              className="px-3 py-1 bg-gray-200 text-gray-700 text-xs rounded-full hover:bg-gray-300 smooth-transition focus-ring"
              onClick={onLogout}
            >
              Đăng xuất
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Sidebar;

--- get-components-code.js ---
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const COMPONENTS_DIR = path.join(__dirname);
const OUTPUT_FILE = path.join(__dirname, 'components_code.txt');

function readAllFiles(dir, fileList = []) {
    if (!fs.existsSync(dir)) return fileList;
    fs.readdirSync(dir).forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
            readAllFiles(filePath, fileList);
        } else {
            fileList.push(filePath);
        }
    });
    return fileList;
}

function main() {
    const allFiles = readAllFiles(COMPONENTS_DIR);
    let output = '';
    allFiles.forEach(file => {
        output += `\n--- ${path.relative(COMPONENTS_DIR, file)} ---\n`;
        try {
            output += fs.readFileSync(file, 'utf8');
        } catch {
            output += '(Không thể đọc file này)\n';
        }
    });
    fs.writeFileSync(OUTPUT_FILE, output, 'utf8');
    console.log(`Đã lưu toàn bộ code components vào file ${OUTPUT_FILE}`);
}

main();